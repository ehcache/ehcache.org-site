<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Ehcache</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://www.ehcache.org/feed.xml" />
<link rel="alternate" type="text/html" href="https://www.ehcache.org" />
<updated>2025-08-29T17:20:15+00:00</updated>
<id>https://www.ehcache.org/</id>
<author>
  <name>Ehcache</name>
  <uri>https://www.ehcache.org/</uri>
  <email>tc-oss@wwpdl.vnet.ibm.com</email>
</author>

    
        
        <entry>
          <title type="html"><![CDATA[Prevent spontaneous cache creation]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/blog/2017/03/15/spontaneous-cache-creation.html" />
          <id>https://www.ehcache.org/blog/2017/03/15/spontaneous-cache-creation</id>
          <published>2017-03-15T16:00:00+00:00</published>
          <updated>2017-03-15T16:00:00+00:00</updated>
          <author>
            <name>Henri Tremblay</name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I played a lot with JCache connectors lately. To plug &lt;a href=&quot;http://www.ehcache.org&quot;&gt;Ehcache 3&lt;/a&gt; to different things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I noticed one really dangerous thing. Frameworks tend to spontaneously create caches that were not explicitly defined. I
think it is coming from the JCache spirit that there should be a default cache configuration. It is nonetheless a bad idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at two examples&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spring&quot;&gt;&lt;/a&gt;Spring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Caching in Spring is implemented by &lt;code&gt;spring-cache&lt;/code&gt;. To plug JCache to &lt;code&gt;spring-cache&lt;/code&gt; you use the &lt;code&gt;JCacheCacheManager&lt;/code&gt;. By default
when a cache isn&amp;#8217;t available in the &lt;code&gt;CacheManager&lt;/code&gt;, Spring calls &lt;code&gt;JCacheCacheManager.getMissingCache&lt;/code&gt;. So far so good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default implementation for this method returns &lt;code&gt;null&lt;/code&gt; when a cache doesn&amp;#8217;t exist. This &lt;code&gt;null&lt;/code&gt; will then be handled at
higher levels to throw a nice exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to explicitly support spontaneous cache creation, &lt;code&gt;getMissingCache&lt;/code&gt; is where you should put your creation code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, watch out if you do that. You might lose track of all the existing caches. And please, &lt;strong&gt;never&lt;/strong&gt; do the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Override
protected Cache getMissingCache(String name) {
    Cache cache = super.getMissingCache(name);
    if(cache == null) {
        return new JCacheCache(cacheManager.createCache(name, new MutableConfiguration&amp;lt;&amp;gt;()));
    }
    return cache;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It returns a cache configured using default. It is &lt;strong&gt;never&lt;/strong&gt; what you want. I will repeat that because you might think I don&amp;#8217;t
mean it. You might think defaults are cool. &lt;strong&gt;It is never what you want&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, as usual, Spring tries to be nice with us. So if you enable caching (&lt;code&gt;@EnableCaching&lt;/code&gt;), that the JSR-107 API is in
the classpath and that you do not expose any &lt;code&gt;CacheManager&lt;/code&gt;, Spring will create one for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;JCacheCacheConfiguration&lt;/code&gt; will get a default JSR-107 &lt;code&gt;CacheManager&lt;/code&gt; and add a list of caches taken from the cache property
&lt;code&gt;spring.cache.cache-names&lt;/code&gt;. These caches are by default created using a &lt;code&gt;new MutableConfiguration&amp;lt;&amp;gt;()&lt;/code&gt;. As we said above, this
is not a correctly configured cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution is to expose the wanted cache configuration in a bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Bean
public javax.cache.configuration.Configuration&amp;lt;Object, Object&amp;gt; cacheConfiguration() {
    CacheConfiguration&amp;lt;Object, Object&amp;gt; cacheConfiguration = CacheConfigurationBuilder
        .newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder
            .newResourcePoolsBuilder().heap(100))
        .build();
    javax.cache.configuration.Configuration&amp;lt;Object, Object&amp;gt; configuration =
        Eh107Configuration.fromEhcacheCacheConfiguration(cacheConfiguration);
    return configuration;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This bean will be magically used as cache default. You should always do this and never let &lt;code&gt;`new MutableConfiguration&amp;lt;&amp;gt;()&lt;/code&gt;
be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An alternative (preferred in fact, thanks &lt;a href=&quot;https://twitter.com/snicoll&quot;&gt;St√©phane Nicoll&lt;/a&gt; for the tip), it to use a &lt;code&gt;JCacheManagerCustomizer&lt;/code&gt; instead
of the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property. Like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Bean
public JCacheManagerCustomizer cacheManagerCustomizer() {
    return cm -&amp;gt; {
        Configuration&amp;lt;Object, Object&amp;gt; cacheConfiguration = createCacheConfiguration();
        cm.createCache(&quot;vets&quot;, cacheConfiguration);
    };
}

private Configuration&amp;lt;Object, Object&amp;gt; createCacheConfiguration() {
    return Eh107Configuration.fromEhcacheCacheConfiguration(CacheConfigurationBuilder
        .newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder
            .newResourcePoolsBuilder().heap(100)));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hibernate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate&quot;&gt;&lt;/a&gt;Hibernate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use JCache with Hibernate we need to use the &lt;code&gt;JCacheRegionFactory&lt;/code&gt;. The problem with &lt;code&gt;JCacheRegionFactory&lt;/code&gt; is that by
default if a cache is not found, it will spontaneously create a cache by passing &lt;code&gt;new MutableConfiguration()&lt;/code&gt;. This means
that instead of using a properly configured cache, you end up with some random default configuration (infinite on heap for
Ehcache).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is really bad because it is pretty hard to detect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I recommend in this case is, again, to override the default. In the latest Hibernate versions (5.2.8+) (thanks to
&lt;a href=&quot;https://github.com/hibernate/hibernate-orm/pull/1783&quot;&gt;HHH-1783&lt;/a&gt;, we can do the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Override
protected Cache&amp;lt;Object, Object&amp;gt; createCache(String regionName, Properties properties, CacheDataDescription metadata) {
    throw new IllegalArgumentException(&quot;Unknown hibernate cache: &quot; + regionName);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In older versions, sadly, there is no straightforward cache creation method to override. The best we have is
&lt;code&gt;newDefaultConfig&lt;/code&gt; which provides the default configuration. One sad thing is that you don&amp;#8217;t have the actual cache name
here. You will need to debug to know it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Override
protected Configuration&amp;lt;Object, Object&amp;gt; newDefaultConfig(Properties properties, CacheDataDescription metadata) {
    throw new IllegalArgumentException(&quot;Unknown hibernate cache: &quot; + metadata);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, an alternative solution would be to provide a meaningful default cache configuration in this method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do understand that frameworks do not like to fail with exceptions. This helps the feeling that they are working out of
the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But I still think silently not caching or providing random default configuration is dangerous. Using my two workarounds
should prevent a lot of headaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/blog/2017/03/15/spontaneous-cache-creation.html&quot;&gt;Prevent spontaneous cache creation&lt;/a&gt; was originally published by Henri Tremblay at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on March 15, 2017.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Ehcache out of his Element]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2016/06/23/ehcache-out-element.html" />
          <id>https://www.ehcache.org/resources/2016/06/23/ehcache-out-element</id>
          <published>2016-06-23T00:00:00+00:00</published>
          <updated>2016-06-23T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;http://cfp.devoxx.pl/2016/talk/DIW-5033/Ehcache%20out%20of%20his%20Element&quot; class=&quot;bare&quot;&gt;http://cfp.devoxx.pl/2016/talk/DIW-5033/Ehcache%20out%20of%20his%20Element&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=RSpgLZ1U75g&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=RSpgLZ1U75g&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2016/06/23/ehcache-out-element.html&quot;&gt;Ehcache out of his Element&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on June 23, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Caching 101: Caching on the JVM (and beyond)]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2016/06/10/caching-101.html" />
          <id>https://www.ehcache.org/resources/2016/06/10/caching-101</id>
          <published>2016-06-10T00:00:00+00:00</published>
          <updated>2016-06-10T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This session, while similar to the previous one with the same title, has been improved based on feedback and experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://cfp.devoxx.co.uk/2016/talk/FWR-0829/Caching_101:_Caching_on_the_JVM_(and_beyond&quot; class=&quot;bare&quot;&gt;https://cfp.devoxx.co.uk/2016/talk/FWR-0829/Caching_101:_Caching_on_the_JVM_(and_beyond&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=FQfd8x29Ud8&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=FQfd8x29Ud8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2016/06/10/caching-101.html&quot;&gt;Caching 101: Caching on the JVM (and beyond)&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on June 10, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Ehcache 3, JSR-107 and Spring 4.2]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/blog/2016/05/18/ehcache3_jsr107_spring.html" />
          <id>https://www.ehcache.org/blog/2016/05/18/ehcache3_jsr107_spring</id>
          <published>2016-05-18T05:30:00+00:00</published>
          <updated>2016-05-18T05:30:00+00:00</updated>
          <author>
            <name>Geoff Gibson</name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I would like to demonstrate how to use &lt;a href=&quot;https://github.com/ehcache/ehcache3&quot;&gt;Ehcache 3.0&lt;/a&gt; as Spring&amp;#8217;s caching implementation.
This article will show you how to use &lt;a href=&quot;https://github.com/ehcache/ehcache3&quot;&gt;Ehcache 3.0&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/&quot;&gt;Spring 4.2&lt;/a&gt; and the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=107&quot;&gt;JSR-107&lt;/a&gt; annotations to build a simple Spring web application.
I have also included some background reading for those of you that would like to read more in depth on the subject matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background-reading&quot;&gt;&lt;/a&gt;Background reading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ehcache 3.0 Documentation&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ehcache.org/documentation/3.0/&quot; class=&quot;bare&quot;&gt;http://www.ehcache.org/documentation/3.0/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Cache Abstraction&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&quot; class=&quot;bare&quot;&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Cache Abstraction, JCache (JSR-107) annotations&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-jsr-107&quot; class=&quot;bare&quot;&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-jsr-107&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/blog/2014/04/14/cache-abstraction-jcache-jsr-107-annotations-support&quot; class=&quot;bare&quot;&gt;https://spring.io/blog/2014/04/14/cache-abstraction-jcache-jsr-107-annotations-support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following is the GitHub example associated with this post:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gibsong/ehcache-jsr107-spring&quot; class=&quot;bare&quot;&gt;https://github.com/gibsong/ehcache-jsr107-spring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jsr-107jcache-annotations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jsr-107jcache-annotations&quot;&gt;&lt;/a&gt;JSR-107(JCache) Annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are familiar with Spring, you know that it provides annotations to assist in developing applications.
In regards to caching, Spring offers support for two sets of annotations that can be used to implement caching.
You have the original Spring annotations and the new JSR-107 annotations.
The original Spring annotations are available to use with Spring versions 3.1+, while the JSR-107 annotations are only available in Spring 4.1+.
In this example we are going to use the JSR-107 annotations.
Below I have listed the most commonly used JSR-107(JCache) annotations, with brief descriptions as well as links to their API&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@CacheDefaults&lt;/strong&gt; - allows configuration of defaults at the class level.
For instance, you can define a cache name at the class level and this will be used as the default.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheDefaults.html&quot; class=&quot;bare&quot;&gt;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheDefaults.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@CacheResult&lt;/strong&gt; - Cache the return value of the method.
The first time the method is invoked with a particular key it will be run and the value will be cached.
On subsequent calls with the same key if the value is still cached it will be taken from the cache instead of running the method.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheResult.html&quot; class=&quot;bare&quot;&gt;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheResult.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember that the value is not cached forever.
The length of time will be influenced by how you set your eviction policy, TTL and TTI.
Please see this discussion for the difference between TTL and TTI: &lt;a href=&quot;http://stackoverflow.com/questions/2583429/how-to-differentiate-between-time-to-live-and-time-to-idle-in-ehcache&quot; class=&quot;bare&quot;&gt;http://stackoverflow.com/questions/2583429/how-to-differentiate-between-time-to-live-and-time-to-idle-in-ehcache&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@CachePut&lt;/strong&gt; - Cache the value specified as the @CacheValue.
This is similar to @CacheResult but the difference is it will cache the @CacheValue every time the method is called.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CachePut.html&quot; class=&quot;bare&quot;&gt;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CachePut.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@CacheRemove&lt;/strong&gt; - removes entries from the specified cache that match the provided/generated key&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheRemove.html&quot; class=&quot;bare&quot;&gt;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheRemove.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@CacheRemoveAll&lt;/strong&gt; - removes all elements in the specified cache&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheRemoveAll.html&quot; class=&quot;bare&quot;&gt;http://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/annotation/CacheRemoveAll.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;javax.cache.annotation&lt;/strong&gt; package which includes all the JSR-107 annotations:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.javadoc.io/doc/javax.cache/cache-api/1.0.0&quot; class=&quot;bare&quot;&gt;http://www.javadoc.io/doc/javax.cache/cache-api/1.0.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#steps&quot;&gt;&lt;/a&gt;Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get started!
Below are a few quick steps to get you up and running with Ehcache 3, Spring 4.1+ and JSR-107.
The entire example can be found on GitHub at &lt;a href=&quot;https://github.com/gibsong/ehcache-jsr107-spring&quot; class=&quot;bare&quot;&gt;https://github.com/gibsong/ehcache-jsr107-spring&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a maven Spring project.
Maven 3.2 or greater is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Ehcache 3 to your pom.xml.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.ehcache&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Be sure to substitute the version number above with the version number of Ehcache that you want to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The Ehcache 3 jar must be on the classpath!
Remove all existing caching provider jars from the classpath to ensure that the right implementation is used.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the jar for the JSR-107 API to the pom.xml&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.cache&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;cache-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Spring boot jars&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.3.2.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/parent&amp;gt;
  ...
  &amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &amp;lt;/dependency&amp;gt;
    ...
  &amp;lt;dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the spring-boot-starter-parent parent project to use Spring boot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the spring-boot-starter-cache to use Spring Framework&amp;#8217;s caching support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add spring-boot-starter-web to use Spring MVC&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;strong&gt;spring.cache.jcache.config&lt;/strong&gt; property to include the classpath and ehcache.xml file.
This needs to be done in the application.properties file.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;application.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;spring.cache.jcache.config=classpath:ehcache.xml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable caching.
This can be done in 1 of 2 ways:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Enable with @EnableCaching annotation:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;SpringJsr107Ehcache3Application.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  @EnableCaching
  public class SpringJsr107Ehcache3Application
  {
    public static void main(String[] args)
    {
        SpringApplication.run(SpringJsr107Ehcache3Application.class, args);
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or enable from the Spring xml configuration file by adding the following tag: &amp;lt;cache:annotation-driven /&amp;gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd&quot;&amp;gt;

    &amp;lt;cache:annotation-driven /&amp;gt;

  &amp;lt;/beans&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Declare caching on a method by adding the @CacheResult annotation.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;PersonService.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  @CacheResult &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  Person getPerson(int ssn)
  {
    switch (ssn)
    {
      case 123456789:
        return new Person(ssn, &quot;Geoff&quot;, &quot;Gibson&quot;);
      case 987654321:
        return new Person(ssn, &quot;Cory&quot;, &quot;Beck&quot;);
      default:
        return new Person(ssn,&quot;John&quot;,&quot;Doe&quot;);
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the @CacheResult annotation above the method.
In this case the key is the &quot;int ssn&quot; parameter and the value cached is a Person instance.
So if you call this method with ssn=&quot;123456789&quot;, the Person(ssn, &quot;Geoff&quot;, &quot;Gibson&quot;) will be returned and cached.
The next time the getPerson(&amp;#8230;&amp;#8203;) method is called with ssn=&quot;123456789&quot; (assuming the key/value wasn&amp;#8217;t evicted from the cache) the method won&amp;#8217;t run and instead it will grab Person(ssn, &quot;Geoff&quot;, &quot;Gibson&quot;) from the cache and return it.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure ehcache.xml&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ehcache.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;config
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xmlns='http://www.ehcache.org/v3'  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    xmlns:jsr107='http://www.ehcache.org/v3/jsr107'&amp;gt;  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

  &amp;lt;service&amp;gt;
    &amp;lt;jsr107:defaults&amp;gt;
      &amp;lt;jsr107:cache name=&quot;people&quot; template=&quot;heap-cache&quot;/&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &amp;lt;/jsr107:defaults&amp;gt;
  &amp;lt;/service&amp;gt;

  &amp;lt;cache-template name=&quot;heap-cache&quot;&amp;gt;
    &amp;lt;listeners&amp;gt; ¬† ¬†&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
¬† ¬† ¬† &amp;lt;listener&amp;gt;
¬† ¬† ¬† ¬† &amp;lt;class&amp;gt;org.terracotta.ehcache.EventLogger&amp;lt;/class&amp;gt;
¬† ¬† ¬† ¬† &amp;lt;event-firing-mode&amp;gt;ASYNCHRONOUS&amp;lt;/event-firing-mode&amp;gt;
¬† ¬† ¬† ¬† &amp;lt;event-ordering-mode&amp;gt;UNORDERED&amp;lt;/event-ordering-mode&amp;gt;
¬† ¬† ¬† ¬† &amp;lt;events-to-fire-on&amp;gt;CREATED&amp;lt;/events-to-fire-on&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
¬† ¬† ¬† ¬† &amp;lt;events-to-fire-on&amp;gt;UPDATED&amp;lt;/events-to-fire-on&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
¬†¬† ¬† ¬† ¬†&amp;lt;events-to-fire-on&amp;gt;EXPIRED&amp;lt;/events-to-fire-on&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
¬† ¬† ¬† ¬† &amp;lt;events-to-fire-on&amp;gt;REMOVED&amp;lt;/events-to-fire-on&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
¬†¬† ¬† ¬† ¬†&amp;lt;events-to-fire-on&amp;gt;EVICTED&amp;lt;/events-to-fire-on&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
¬† ¬† ¬† &amp;lt;/listener&amp;gt;
¬† ¬† &amp;lt;/listeners&amp;gt;
    &amp;lt;resources&amp;gt;
      &amp;lt;heap unit=&quot;entries&quot;&amp;gt;2000&amp;lt;/heap&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
      &amp;lt;offheap unit=&quot;MB&quot;&amp;gt;100&amp;lt;/offheap&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;(11)&lt;/b&gt;
    &amp;lt;/resources&amp;gt;
  &amp;lt;/cache-template&amp;gt;
&amp;lt;/config&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The core namespace, the xsd can be found here: &lt;a href=&quot;http://www.ehcache.org/schema/ehcache-core-3.0.xsd&quot; class=&quot;bare&quot;&gt;http://www.ehcache.org/schema/ehcache-core-3.0.xsd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The JSR-107 namespace, the xsd can be found here: &lt;a href=&quot;http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd&quot; class=&quot;bare&quot;&gt;http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines a cache with alias &quot;people&quot;, which inherits from cache-template &quot;heap-cache&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This section allows you to add cache event listeners.
I added a listener for 5 events.
Each event will be logged, by the EventLogger class, when it occurs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines a CREATED event, when an entry is added to the cache, with this listener.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines an UPDATED event, when an entry is updated in the cache, with this listener.
However in this example this one will never be used.
I just added it as an example.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines an EXPIRED event, when an entry is expired from the cache, with this listener.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines an REMOVED event, when an entry is removed from the cache, with this listener.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defines an EVICTED event, when an entry is evicted from the cache, with this listener.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The heap is configured to allow 2000 entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;11&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The offheap storage is configured with 100 MB of space.
Remember the unit of measure is case sensitive.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
XML Configuration Documentation: &lt;a href=&quot;http://www.ehcache.org/documentation/3.0/xml.html&quot; class=&quot;bare&quot;&gt;http://www.ehcache.org/documentation/3.0/xml.html&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a cache by implementing the JCacheManagerCustomizer.customize(CacheManager cacheManager) method, which will be invoked before the CacheManager is used.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;PersonService.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  @Component
  public static class CachingSetup implements JCacheManagerCustomizer
  {
    @Override
    public void customize(CacheManager cacheManager)
    {
      cacheManager.createCache(&quot;people&quot;, new MutableConfiguration&amp;lt;&amp;gt;()  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        .setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(SECONDS, 10))) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        .setStoreByValue(false)
        .setStatisticsEnabled(true));
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Creates a cache with an alias of &quot;people&quot;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This line sets the expiration policy.
In this case we set it to 10 seconds.
Thus, if an entry hasn&amp;#8217;t been touched (created, updated, or accessed) for the last 10 seconds it will be evicted.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
JCacheManagerCustomizer API: &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/cache/JCacheManagerCustomizer.html&quot; class=&quot;bare&quot;&gt;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/cache/JCacheManagerCustomizer.html&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you can build the project by running the following maven command: mvn clean install&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To run the application use this maven command: mvn spring-boot:run&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make a get request to the application use the following url: &lt;a href=&quot;http://localhost:8080/person/{ssn}&quot; class=&quot;bare&quot;&gt;http://localhost:8080/person/{ssn}&lt;/a&gt;
IMPORTANT: Remember to replace {ssn} in the url with an integer value.
123456789 and 987654321 are mapped to unique Person instances, while anything else maps to a generic Person instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wow wasn&amp;#8217;t that easy!
I hope you enjoyed my quick start tutorial on how to use Ehcache 3 with Spring 4.1+ and JSR-107.
If you have any questions please feel free to send them to me at &lt;a href=&quot;mailto:geoff.gibson@softwareag.com&quot;&gt;geoff.gibson@softwareag.com&lt;/a&gt; and I will be happy to help out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/blog/2016/05/18/ehcache3_jsr107_spring.html&quot;&gt;Ehcache 3, JSR-107 and Spring 4.2&lt;/a&gt; was originally published by Geoff Gibson at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on May 18, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Custom Serializers]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/blog/2016/05/12/ehcache3-serializers.html" />
          <id>https://www.ehcache.org/blog/2016/05/12/ehcache3-serializers</id>
          <published>2016-05-12T15:45:00+00:00</published>
          <updated>2016-05-12T15:45:00+00:00</updated>
          <author>
            <name>Albin Suresh</name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Ehcache 3 documentation at &lt;a href=&quot;http://www.ehcache.org/documentation/3.0/serializers-copiers.html#serializers&quot;&gt;Serializers&lt;/a&gt;
gives you an overview of how to use custom serializers with a cache.
The section on &lt;a href=&quot;http://www.ehcache.org/documentation/3.0/serializers-copiers.html#persistent-vs-transient-caches&quot;&gt;Persistent and Transient Serializers&lt;/a&gt;
briefly covers the serializer contracts that must be honored while writing custom serializers to be used with
persistent/transient caches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article explains how you can write a transient/persistent custom serializer that works with Ehcache.
Here we discuss the significance of transient serializers and persistent serializers in detail through some
practical examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;serializer-types&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#serializer-types&quot;&gt;&lt;/a&gt;Serializer types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As indicated in the Ehcache documentation, serializers require a single argument constructor or a double-argument
constructor or both based on the type of cache they are used in.
The single-argument constructor is fit to be used with transient caches and the ones with the double-argument constructor can be used with persistent caches.
An implementation having both the constructors can be used with both &lt;em&gt;persistent&lt;/em&gt; and &lt;em&gt;transient&lt;/em&gt; caches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hmm&amp;#8230;&amp;#8203; So what does that really mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you look at the custom serializer implementations in the GettingStarted samples they are all have both the constructors
and if you look at the code they don&amp;#8217;t do anything different.
It&amp;#8217;s all standard java serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So what difference do the constructors make?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is a &lt;em&gt;transient&lt;/em&gt; serializer with single-argument constructor?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do I implement a &lt;em&gt;persistent&lt;/em&gt; serializer with the double-argument constructor?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When would I use both?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read along for the answers to these questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These constructors are associated with the state of the serializer implementations.
So if your custom serializer doesn&amp;#8217;t have any state associated with it; that affects the serialization and
deserialization logic; then that is a serializer implementation that can safely be used with transient and persistent
caches. Such serializers would have both the constructors.
If you look at the &lt;code&gt;LongSerializer&lt;/code&gt; or &lt;code&gt;StringSerializer&lt;/code&gt; implementations in the GettingStarted samples, they don&amp;#8217;t have
any state that the serialization and deserialization depend on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what are these serializers with &lt;strong&gt;state&lt;/strong&gt;? I&amp;#8217;ll try to explain that with some examples in the subsequent sections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The code samples in this article were compiled and tested with Ehcache v3.0.0.
Complete samples can be found at &lt;a href=&quot;https://github.com/albinsuresh/ehcache-demo&quot; class=&quot;bare&quot;&gt;https://github.com/albinsuresh/ehcache-demo&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stateful-serializers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stateful-serializers&quot;&gt;&lt;/a&gt;Stateful serializers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have an application that deals with fruits. So I have a &lt;em&gt;fruits&lt;/em&gt; cache &lt;code&gt;Cache&amp;lt;Long, String&amp;gt;&lt;/code&gt; that holds the mappings
from fruit ids to fruit names.
If this cache is a multi-tiered one then the keys and values will be stored in their serialized form in the
non-heap tiers.
For simplicity I&amp;#8217;ll restrict the scope of our discussion only to the values that are fruit names of type &lt;code&gt;String&lt;/code&gt;.
I can use standard Java serialization to serialize these values.
But for some reason I wanted to reduce the amount of serialized data.
So instead of serializing the strings directly I decided to map all the fruit names to some integer and store those
serialized integers instead of strings thinking that it&amp;#8217;d save some space(dumb, huh?).
Since this serializer is designed specifically for the fruits cache, I was fairly confident that the integer range would
be more than enough to handle all possible fruit names on this planet.
And here is the serializer implementation that I came up with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class SimpleTransientStringSerializer implements Serializer&amp;lt;String&amp;gt; {

  protected Map&amp;lt;Integer, String&amp;gt; idStringMap = new HashMap&amp;lt;Integer, String&amp;gt;();
  protected Map&amp;lt;String, Integer&amp;gt; stringIdMap = new HashMap&amp;lt;String, Integer&amp;gt;();
  protected int id = 0;

  public SimpleTransientStringSerializer(ClassLoader loader) {
    //no-op
  }

  @Override
  public ByteBuffer serialize(final String object) throws SerializerException {
    Integer currentId = stringIdMap.get(object);
    if(currentId == null) {
      stringIdMap.put(object, id);
      idStringMap.put(id, object);
      currentId = id++;
    }

    ByteBuffer buff = ByteBuffer.allocate(4);
    buff.putInt(currentId).flip();
    return buff;
  }

  @Override
  public String read(final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    Integer mapping = binary.getInt();
    String obj = idStringMap.get(mapping);
    if(obj == null) {
      throw new SerializerException(&quot;Unable to serialize: &quot; + binary.array() + &quot;. No value mapping found for &quot; + mapping);
    }
    return obj;
  }

  @Override
  public boolean equals(final String object, final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    return object.equals(read(binary));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short this is what the above serializer does: Whenever it gets a string(the fruit name, in our application) to be
serialized it checks if there is a mapping that exists already for that name in &lt;code&gt;stringIdMap&lt;/code&gt;.
If yes, the mapped integer is retrieved from the map and that integer value is serialized.
If a mapping is not found, we generate a new &lt;code&gt;id&lt;/code&gt; for the new fruit name add it to both the maps that we preserve
(&lt;code&gt;stringIdMap&lt;/code&gt; and &lt;code&gt;idStringMap&lt;/code&gt;) and then serialize this newly generated id.
Now on deserialization, the same &lt;code&gt;idStringMap&lt;/code&gt; map is used to retrieve the fruit names from the deserialised integer
values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in the above serializer, the &lt;code&gt;idStringMap&lt;/code&gt;, &lt;code&gt;stringIdMap&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt; constitutes the &lt;em&gt;state&lt;/em&gt; of the serializer.
The serialization and deserialization depends on this state and would not work properly without that state.
This serializer has the single-argument constructor making it fit to be used with transient caches.
So now that we have a state-full serializer understanding the idea of &lt;em&gt;transient&lt;/em&gt; and &lt;em&gt;persistent&lt;/em&gt; serializers would be
simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a sample code that uses the &lt;code&gt;SimpleTransientStringSerializer&lt;/code&gt; with a cache:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);
CacheConfiguration&amp;lt;Long, String&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(
        Long.class, String.class, ResourcePoolsBuilder.heap(10).offheap(5, MemoryUnit.MB))  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    .withValueSerializer(SimpleTransientStringSerializer.class)   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .build();

Cache&amp;lt;Long, String&amp;gt; fruitsCache = cacheManager.createCache(&quot;fruitsCache&quot;, cacheConfig);
fruitsCache.put(1L, &quot;apple&quot;);
fruitsCache.put(2L, &quot;orange&quot;);
fruitsCache.put(3L, &quot;mango&quot;);
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
assertThat(fruitsCache.get(3L), is(&quot;mango&quot;));
assertThat(fruitsCache.get(2L), is(&quot;orange&quot;));
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a multi-tiered cache that requires key and value serialization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure a serializer for the values. The &lt;code&gt;SimpleTransientStringSerializer&lt;/code&gt; in this case. For the sake of simplicity
we have omitted key serializer. Since one is not provided explicitly, ehcache would provide default serializers to
perform the key serialization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Verify that the cache/serializer works.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous section we demonstrated the use of a transient serializer.
We used that serializer with a transient cache and everything works just fine.
Now imagine what would happen if we use the same serializer with a persistent cache.
Everything would work as long as your application is running. Once you close the cache manager or end the application
the data associated with the cache will be persisted so that the same data will be available on a restart.
But there is a serious problem. The following piece of code would demonstrate that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheConfiguration&amp;lt;Long, String&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(
        Long.class, String.class,
        ResourcePoolsBuilder.heap(10).disk(10, MemoryUnit.MB, true))  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        .withValueSerializer(SimpleTransientStringSerializer.class)
        .build();

CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder()
    .with(new CacheManagerPersistenceConfiguration(new File(PERSISTENCE_PATH)))   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .withCache(&quot;fruitsCache&quot;, cacheConfig)
    .build(true);

Cache&amp;lt;Long, String&amp;gt; fruitsCache = cacheManager.getCache(&quot;fruitsCache&quot;, Long.class, String.class);   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
fruitsCache.put(1L, &quot;apple&quot;);
fruitsCache.put(2L, &quot;mango&quot;);
fruitsCache.put(3L, &quot;orange&quot;);   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

cacheManager.close();   &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
cacheManager.init();    &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
fruitsCache = cacheManager.getCache(&quot;fruitsCache&quot;, Long.class, String.class);   &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));   &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a cache configuration with persistent disk tier.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the &lt;code&gt;LocalPersistenceService&lt;/code&gt; for the cache manager.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Retrieve the cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Populate data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Verify that everything works.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Close the cache manager.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Reinitialize the cache manager.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Retrieve the cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Retrieve a cached/persisted value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above piece of code would fail in the cache creation step since the serializer provided does not meet the 2-arg
constructor requirement for persistent caches.
But why does &lt;code&gt;Ehcache&lt;/code&gt; enforce this requirement and fail-fast if the requirement is violated?
What would have happened if we had proceeded with the sample code?
Would it have failed? If yes, then where?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above piece of code would have failed in step 9 because the cache would not be able to retrieve the persisted data.
Because the serializer that you provided would fail in retrieving that data.
When the cache is reinitialized, the associated serializer instance is also initialized for the cache to work.
But the newly initialized serializer would have an empty state(empty &lt;code&gt;stringIdMap&lt;/code&gt; and &lt;code&gt;idStringMap&lt;/code&gt; maps and the &lt;code&gt;id&lt;/code&gt;
initialized to 0).
So when the cache tries to read a value it gets an integer value from the persistent tier as that is what got persisted.
But using the empty state the serializer will not able to map that value to a fruit name, and so it would throw.
That leaves the persisted data unusable.
So what could you have done differently to make it work?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The answer is simple.
Persist the serializer&amp;#8217;s state as well and restore it when the cache is re-initialized.
And that is exactly what persistent serializers would do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;persistent-serializers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#persistent-serializers&quot;&gt;&lt;/a&gt;Persistent serializers&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A persistent serializer persists its state and retrieves it when reinitialized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A persistent serializer implementation can choose to persist the data wherever it wants.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But a recommended way is to use the cache manager&amp;#8217;s &lt;code&gt;LocalPersistenceService&lt;/code&gt; so that the cache manager would take care
of the persistence.
Inorder to do that, the serializer implementation needs to have a constructor that takes in a
&lt;code&gt;FileBasedPersistenceContext&lt;/code&gt; as an argument, in addition to the class loader argument.
The use of the &lt;code&gt;FileBasedPersistenceContext&lt;/code&gt; argument is optional.
But the presence of this double-argument constructor is a strict requirement for persistent caches.
When the cache using this serializer is initialized, this 2-argument constructor is used to instantiate the serializer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a look at this implementation of a persistent serializer.
It is just an extension of the same old transient serializer with the persistent stuff wired in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class SimplePersistentStringSerializer extends SimpleTransientStringSerializer implements Closeable {

  private final File stateFile;

  public SimplePersistentStringSerializer(final ClassLoader loader, FileBasedPersistenceContext persistence) throws IOException, ClassNotFoundException {
    super(loader);
    stateFile = new File(persistence.getDirectory(), &quot;serializer.data&quot;);
    if(stateFile.exists()) {
      restoreState();
    }
  }

  @Override
  public void close() throws IOException {
    persistState();
  }

  private void restoreState() throws IOException, ClassNotFoundException {
    FileInputStream fin = new FileInputStream(stateFile);
    try {
      ObjectInputStream oin = new ObjectInputStream(fin);
      try {
        idStringMap = (Map&amp;lt;Integer, String&amp;gt;) oin.readObject();
        stringIdMap = (Map&amp;lt;String, Integer&amp;gt;) oin.readObject();
        id = oin.readInt();
      } finally {
        oin.close();
      }
    } finally {
      fin.close();
    }
  }

  private void persistState() throws IOException {
    OutputStream fout = new FileOutputStream(stateFile);
    try {
      ObjectOutputStream oout = new ObjectOutputStream(fout);
      try {
        oout.writeObject(idStringMap);
        oout.writeObject(stringIdMap);
        oout.writeInt(id);
      } finally {
        oout.close();
      }
    } finally {
      fout.close();
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the above persistent serializer, the state or the serialization/deserialization has not changed.
The only additional thing is the persistence logic. And that is fairly simple too.
The state is restored on initialization if one is found, and persisted on close.
And have a look at the sample from the previous section modified to use our persistent serializer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheConfiguration&amp;lt;Long, String&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(
        Long.class, String.class,
        ResourcePoolsBuilder.newResourcePoolsBuilder()
            .heap(10, EntryUnit.ENTRIES).disk(10, MemoryUnit.MB, true))
        .withValueSerializer(SimplePersistentStringSerializer.class)   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        .build();

CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder()
    .with(new CacheManagerPersistenceConfiguration(new File(PERSISTENCE_PATH)))
    .withCache(&quot;fruitsCache&quot;, cacheConfig)
    .build(true);

Cache&amp;lt;Long, String&amp;gt; fruitsCache = cacheManager.getCache(&quot;fruitsCache&quot;, Long.class, String.class);
fruitsCache.put(1L, &quot;apple&quot;);
fruitsCache.put(2L, &quot;mango&quot;);
fruitsCache.put(3L, &quot;orange&quot;);
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));

cacheManager.close();
cacheManager.init();
fruitsCache = cacheManager.getCache(&quot;fruitsCache&quot;, Long.class, String.class);
assertThat(fruitsCache.get(1L), is(&quot;apple&quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The only change from the previous sample is the usage of &lt;code&gt;SimplePersistentStringSerializer&lt;/code&gt; here.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;third-party-serializers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#third-party-serializers&quot;&gt;&lt;/a&gt;Third-party serializers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ehcache by-default relies on a tweaked form of java standard serialization to perform serialization and deserialization.
But most of you already know that java built-in serialization is not the best performing serialization technique.
A lot of alternative serialization techniques are available in the market.
With the custom serializers support of ehcache you can take advantage of any one of those third-party serializers out
there and use those within ehcache.
All you have to do is write a custom serializer using the third-party serializer of your choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In-order to demonstrate that, I have written a custom serializer using the popular serialization framework &lt;strong&gt;Kryo&lt;/strong&gt;.
Samples used in this section are not the same fruits cache based ones.
Here I&amp;#8217;m using an employee cache of type &lt;code&gt;Cache&amp;lt;Long, Employee&amp;gt;&lt;/code&gt;.
I have kept the &lt;code&gt;Employee&lt;/code&gt; object as simple as possible and yet represent a real-life object structure.
These are the structures that we have used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Description {

  String alias;
  int id;

  public Description() {}

  public Description(final String alias, final int id) {
    this.alias = alias;
    this.id = id;
  }

  @Override
  public boolean equals(final Object obj) {
    if(this == obj) return true;
    if(obj == null || this.getClass() != obj.getClass()) return false;

    Description other = (Description)obj;
    if(id != other.id) return false;
    if ((alias == null) ? (alias != null) : !alias.equals(other.alias)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + id;
    result = 31 * result + (alias == null ? 0 : alias.hashCode());
    return result;
  }

  @Override
  public String toString() {
    return alias + &quot;;&quot; + id;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Person {

  String name;
  int age;
  Description desc;

  public Person() {}

  public Person(String name, int age, Description desc) {
    this.name = name;
    this.age = age;
    this.desc = desc;
  }

  @Override
  public boolean equals(final Object other) {
    if(this == other) return true;
    if(other == null) return false;
    if(!(other instanceof Person)) return false;

    Person that = (Person)other;
    if(age != that.age) return false;
    if((name == null) ? (that.name != null) : !name.equals(that.name)) return false;

    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + age;
    result = 31 * result + (name == null ? 0 : name.hashCode());
    return result;
  }

  @Override
  public String toString() {
    return name + &quot;;&quot; + age + &quot;::&quot; + desc;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Employee extends Person {

  long employeeId;

  public Employee() {}

  public Employee(long employeeId, String name, int age, Description desc) {
    super(name, age, desc);
    this.employeeId = employeeId;
  }

  @Override
  public boolean equals(final Object obj) {
    if (!super.equals(obj)) return false;
    if(!(obj instanceof Employee)) return false;

    Employee other = (Employee)obj;
    if(employeeId != other.employeeId) return false;

    return true;
  }

  @Override
  public int hashCode() {
    return (31 * (int)employeeId) +  super.hashCode();
  }

  @Override
  public String toString() {
    return employeeId + &quot;;&quot; + super.toString();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
None of the above classes are &lt;code&gt;Serializable&lt;/code&gt;. Yet they can be serialized with Kryo. But for that every class needs
a no-arg constructor and these classes meet that requirement.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So here is the kryo based custom serializer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class KryoSerializer implements Serializer&amp;lt;Employee&amp;gt; {

  private static final Kryo kryo = new Kryo();

  public KryoSerializer(ClassLoader loader) {
    //no-op
  }

  @Override
  public ByteBuffer serialize(final Employee object) throws SerializerException {
    Output output = new Output(4096);
    kryo.writeObject(output, object);
    return ByteBuffer.wrap(output.getBuffer());
  }

  @Override
  public Employee read(final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    Input input =  new Input(new ByteBufferInputStream(binary)) ;
    return kryo.readObject(input, Employee.class);
  }

  @Override
  public boolean equals(final Employee object, final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    return object.equals(read(binary));
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above serializer is a state-less one that demonstrates the basic integration with kryo.
Here is the sample code that uses the same:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);
CacheConfiguration&amp;lt;Long, Employee&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(Long.class, Employee.class, ResourcePoolsBuilder.heap(10))
        .withValueSerializer(KryoSerializer.class)  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        .build();

Cache&amp;lt;Long, Employee&amp;gt; employeeCache = cacheManager.createCache(&quot;employeeCache&quot;, cacheConfig);
Employee emp =  new Employee(1234, &quot;foo&quot;, 23, new Description(&quot;bar&quot;, 879));
employeeCache.put(1L, emp);
assertThat(employeeCache.get(1L), is(emp));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we configure the &lt;code&gt;KryoSerializer&lt;/code&gt; for the &lt;strong&gt;VALUE&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using some advanced features of kryo I managed to write the &lt;em&gt;transient&lt;/em&gt; only and &lt;em&gt;persistent&lt;/em&gt; only versions too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the transient one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class TransientKryoSerializer implements Serializer&amp;lt;Employee&amp;gt;, Closeable{

  protected static final Kryo kryo = new Kryo();

  protected Map&amp;lt;Class, Integer&amp;gt; objectHeaderMap = new HashMap&amp;lt;Class, Integer&amp;gt;();  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

  public TransientKryoSerializer() {
  }

  public TransientKryoSerializer(ClassLoader loader) {
    populateObjectHeadersMap(kryo.register(Employee.class));  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    populateObjectHeadersMap(kryo.register(Person.class));  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    populateObjectHeadersMap(kryo.register(Description.class)); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  }

  protected void populateObjectHeadersMap(Registration reg) {
    objectHeaderMap.put(reg.getType(), reg.getId());  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  }

  @Override
  public ByteBuffer serialize(Employee object) throws SerializerException {
    Output output = new Output(new ByteArrayOutputStream());
    kryo.writeObject(output, object);
    output.close();

    return ByteBuffer.wrap(output.getBuffer());
  }

  @Override
  public Employee read(final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    Input input =  new Input(new ByteBufferInputStream(binary)) ;
    return kryo.readObject(input, Employee.class);
  }

  @Override
  public boolean equals(final Employee object, final ByteBuffer binary) throws ClassNotFoundException, SerializerException {
    return object.equals(read(binary));
  }

  @Override
  public void close() throws IOException {
    objectHeaderMap.clear();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This &lt;strong&gt;objectHeaderMap&lt;/strong&gt; is the state of the serializer. When an object is serialized the fully qualified name of the
class is written in the header. Since writing the entire name is costly I decided to map these names to some integer
values and then write out that integer instead of the name. So this map would contain the mapping between the
classes and the corresponding integer values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we register a class with kryo and then kryo will assign an integer value to that class so that all instances of
class will be serialized with this assigned integer in-place of the fully-qualified class name. The &lt;code&gt;Employee&lt;/code&gt; class
in this case. Refer &lt;a href=&quot;https://github.com/EsotericSoftware/kryo#registration&quot;&gt;Kryo#Registartion&lt;/a&gt; for more information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since &lt;code&gt;Employee&lt;/code&gt; extends &lt;code&gt;Person&lt;/code&gt; we register that too.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since the &lt;code&gt;Person&lt;/code&gt; class contain a &lt;code&gt;Description&lt;/code&gt; instance we register that too. So the idea is to register all
known custom class types associated with the object to be serialized(the employee object).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is how we populate the &lt;strong&gt;objectHeaderMap&lt;/strong&gt; every time we register a class.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following sample is the same as the one in the previous section with just the serializer changed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);
CacheConfiguration&amp;lt;Long, Employee&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(Long.class, Employee.class, ResourcePoolsBuilder.heap(10))
        .withValueSerializer(TransientKryoSerializer.class)
        .build();

Cache&amp;lt;Long, Employee&amp;gt; employeeCache = cacheManager.createCache(&quot;employeeCache&quot;, cacheConfig);
Employee emp =  new Employee(1234, &quot;foo&quot;, 23, new Description(&quot;bar&quot;, 879));
employeeCache.put(1L, emp);
assertThat(employeeCache.get(1L), is(emp));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above sample must be self explanatory as we have already seen this sample so many times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now the persistent adaptation of the transient serializer is here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class PersistentKryoSerializer extends TransientKryoSerializer {

  private final File stateFile;

  public PersistentKryoSerializer(ClassLoader loader, FileBasedPersistenceContext persistence) throws IOException, ClassNotFoundException {
    stateFile = new File(persistence.getDirectory(), &quot;PersistentKryoSerializerState.ser&quot;);
    if(stateFile.exists()) {  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      restoreState();   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      for(Map.Entry&amp;lt;Class, Integer&amp;gt; entry: objectHeaderMap.entrySet()) {  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        kryo.register(entry.getKey(), entry.getValue());  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      }
    }
  }

  @Override
  public void close() throws IOException {
    persistState(); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  }

  private void persistState() throws FileNotFoundException {
    Output output = new Output(new FileOutputStream(stateFile));
    try {
      kryo.writeObject(output, objectHeaderMap);
    } finally {
      output.close();
    }
  }

  private void restoreState() throws FileNotFoundException {
    Input input = new Input(new FileInputStream(stateFile));
    try {
      objectHeaderMap = kryo.readObject(input, HashMap.class);
    } finally {
      input.close();
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You must be familiar with this routine already:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;On initialization, if a persistent file is found&amp;#8230;&amp;#8203;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Restore the contents of the file which essentially restores the &lt;strong&gt;objectHeaderMap&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Then iterate through the contents of the map and&amp;#8230;&amp;#8203;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Register the types again with &lt;strong&gt;kryo&lt;/strong&gt; using the same integer mapped values. Then only the persisted data can be
deserialized as they are persisted with these integer values in their headers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;On &lt;em&gt;close&lt;/em&gt;, the map is serialized and persisted to a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the familiar test sample again testing this persistent serializer implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CacheConfiguration&amp;lt;Long, Employee&amp;gt; cacheConfig =
    CacheConfigurationBuilder.newCacheConfigurationBuilder(
        Long.class, Employee.class,
        ResourcePoolsBuilder.newResourcePoolsBuilder()
            .heap(10, EntryUnit.ENTRIES).offheap(5, MemoryUnit.MB).disk(10, MemoryUnit.MB, true))
        .withValueSerializer(PersistentKryoSerializer.class)
        .build();

CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder()
    .with(new CacheManagerPersistenceConfiguration(new File(PERSISTENCE_PATH)))
    .withCache(&quot;employeeCache&quot;, cacheConfig)
    .build(true);

Cache&amp;lt;Long, Employee&amp;gt; employeeCache = cacheManager.getCache(&quot;employeeCache&quot;, Long.class, Employee.class);
Employee emp =  new Employee(1234, &quot;foo&quot;, 23, new Description(&quot;bar&quot;, 879));
employeeCache.put(1L, emp);
assertThat(employeeCache.get(1L), is(emp));

cacheManager.close();
cacheManager.init();
employeeCache = cacheManager.getCache(&quot;employeeCache&quot;, Long.class, Employee.class);
assertThat(employeeCache.get(1L), is(emp));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/blog/2016/05/12/ehcache3-serializers.html&quot;&gt;Custom Serializers&lt;/a&gt; was originally published by Albin Suresh at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on May 12, 2016.&lt;/p&gt;</content>
        </entry>
    

    

    

    
        
        <entry>
          <title type="html"><![CDATA[Ehcache 3.0 Released with Revamped API and Off-Heap Storage]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2016/05/02/ehcache-released.html" />
          <id>https://www.ehcache.org/resources/2016/05/02/ehcache-released</id>
          <published>2016-05-02T00:00:00+00:00</published>
          <updated>2016-05-02T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An &lt;a href=&quot;https://www.infoq.com/news/2016/05/ehcache-3.0&quot;&gt;article about the Ehcache 3 release&lt;/a&gt; on InfoQ by &lt;a href=&quot;https://twitter.com/mraible&quot;&gt;Matt Raible&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2016/05/02/ehcache-released.html&quot;&gt;Ehcache 3.0 Released with Revamped API and Off-Heap Storage&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on May 02, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Terracotta Off-Heap pour les nuls]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2016/04/22/terracotta-offheap.html" />
          <id>https://www.ehcache.org/resources/2016/04/22/terracotta-offheap</id>
          <published>2016-04-22T00:00:00+00:00</published>
          <updated>2016-04-22T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This content is in French.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://cfp.devoxx.fr/2016/talk/LBA-4042/Terracotta_Off-Heap_pour_les_nuls&quot; class=&quot;bare&quot;&gt;https://cfp.devoxx.fr/2016/talk/LBA-4042/Terracotta_Off-Heap_pour_les_nuls&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=ezTrDlrIz5o&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=ezTrDlrIz5o&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2016/04/22/terracotta-offheap.html&quot;&gt;Terracotta Off-Heap pour les nuls&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on April 22, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Ehcache hors de son Element]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2016/04/21/ehcache-element.html" />
          <id>https://www.ehcache.org/resources/2016/04/21/ehcache-element</id>
          <published>2016-04-21T00:00:00+00:00</published>
          <updated>2016-04-21T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This content is in French.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://cfp.devoxx.fr/2016/talk/FFI-0883/Ehcache_hors_de_son_Element&quot; class=&quot;bare&quot;&gt;https://cfp.devoxx.fr/2016/talk/FFI-0883/Ehcache_hors_de_son_Element&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=7Ytt93mGrMY&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=7Ytt93mGrMY&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2016/04/21/ehcache-element.html&quot;&gt;Ehcache hors de son Element&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on April 21, 2016.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Ehcache 3: JSR-107 on steroids]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/11/18/ehcache3-jsr107.html" />
          <id>https://www.ehcache.org/resources/2015/11/18/ehcache3-jsr107</id>
          <published>2015-11-18T00:00:00+00:00</published>
          <updated>2015-11-18T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;http://cfp2015.devoxx.ma/2015/talk/FDX-7262/Ehcache3:_JSR107_on_steroids&quot; class=&quot;bare&quot;&gt;http://cfp2015.devoxx.ma/2015/talk/FDX-7262/Ehcache3:_JSR107_on_steroids&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/LouisJacomet/ehcache-3-jsr107-on-steroids-at-devoxx-morocco&quot; class=&quot;bare&quot;&gt;http://www.slideshare.net/LouisJacomet/ehcache-3-jsr107-on-steroids-at-devoxx-morocco&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/11/18/ehcache3-jsr107.html&quot;&gt;Ehcache 3: JSR-107 on steroids&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on November 18, 2015.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Terracotta‚Äôs OffHeap Explained]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/11/13/terracotta-offHeap.html" />
          <id>https://www.ehcache.org/resources/2015/11/13/terracotta-offHeap</id>
          <published>2015-11-13T00:00:00+00:00</published>
          <updated>2015-11-13T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://cfp.devoxx.be/2015/talk/AYH-2795/Terracotta‚Äôs_OffHeap_Explained&quot; class=&quot;bare&quot;&gt;https://cfp.devoxx.be/2015/talk/AYH-2795/Terracotta‚Äôs_OffHeap_Explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=xCojSZMp_Zw&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=xCojSZMp_Zw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/ChrisDennis7/terracottas-offheap-explained-55214150&quot; class=&quot;bare&quot;&gt;http://www.slideshare.net/ChrisDennis7/terracottas-offheap-explained-55214150&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/11/13/terracotta-offHeap.html&quot;&gt;Terracotta‚Äôs OffHeap Explained&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on November 13, 2015.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Caching 101: Caching on the JVM (and beyond)]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/11/09/caching-101.html" />
          <id>https://www.ehcache.org/resources/2015/11/09/caching-101</id>
          <published>2015-11-09T00:00:00+00:00</published>
          <updated>2015-11-09T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://cfp.devoxx.be/2015/talk/KVW-1306/Caching_101:_Caching_on_the_JVM_(and_beyond).html&quot; class=&quot;bare&quot;&gt;https://cfp.devoxx.be/2015/talk/KVW-1306/Caching_101:_Caching_on_the_JVM_(and_beyond).html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=HtrU07c17JQ&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=HtrU07c17JQ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/11/09/caching-101.html&quot;&gt;Caching 101: Caching on the JVM (and beyond)&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on November 09, 2015.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Bringing javax.cache'ing to your application]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/10/19/javax-cache-to-your-app.html" />
          <id>https://www.ehcache.org/resources/2015/10/19/javax-cache-to-your-app</id>
          <published>2015-10-19T00:00:00+00:00</published>
          <updated>2015-10-19T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://spring.io/blog/2015/10/19/springone2gx-2015-replay-bringing-javax-cache-ing-to-your-application&quot; class=&quot;bare&quot;&gt;https://spring.io/blog/2015/10/19/springone2gx-2015-replay-bringing-javax-cache-ing-to-your-application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://spring.io/blog/2015/10/19/springone2gx-2015-replay-bringing-javax-cache-ing-to-your-application&quot; class=&quot;bare&quot;&gt;https://spring.io/blog/2015/10/19/springone2gx-2015-replay-bringing-javax-cache-ing-to-your-application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/SpringCentral/bringing-javaxcacheing-to-your-app&quot; class=&quot;bare&quot;&gt;http://www.slideshare.net/SpringCentral/bringing-javaxcacheing-to-your-app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/10/19/javax-cache-to-your-app.html&quot;&gt;Bringing javax.cache'ing to your application&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on October 19, 2015.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Caching reboot: javax.cache & Ehcache 3]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/06/22/caching-reboot.html" />
          <id>https://www.ehcache.org/resources/2015/06/22/caching-reboot</id>
          <published>2015-06-22T00:00:00+00:00</published>
          <updated>2015-06-22T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;http://cfp.2015.devoxx.pl/2015/talk/QYO-0948/Caching_reboot:_javax.cache_&amp;amp;_Ehcache_3.html&quot; class=&quot;bare&quot;&gt;http://cfp.2015.devoxx.pl/2015/talk/QYO-0948/Caching_reboot:_javax.cache_&amp;amp;_Ehcache_3.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=6kW7tcqvsVs&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=6kW7tcqvsVs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/LouisJacomet/caching-reboot-javaxcache-ehcache-3-61757652&quot; class=&quot;bare&quot;&gt;http://www.slideshare.net/LouisJacomet/caching-reboot-javaxcache-ehcache-3-61757652&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/06/22/caching-reboot.html&quot;&gt;Caching reboot: javax.cache & Ehcache 3&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on June 22, 2015.&lt;/p&gt;</content>
        </entry>
    

    
        
        <entry>
          <title type="html"><![CDATA[Caching reboot: javax.cache & Ehcache 3]]></title>
          <link rel="alternate" type="text/html" href="https://www.ehcache.org/resources/2015/04/09/caching-reboot.html" />
          <id>https://www.ehcache.org/resources/2015/04/09/caching-reboot</id>
          <published>2015-04-09T00:00:00+00:00</published>
          <updated>2015-04-09T00:00:00+00:00</updated>
          <author>
            <name></name>
            <uri>https://www.ehcache.org</uri>
          </author>
          <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This content is in French.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conference page: &lt;a href=&quot;https://www.devoxx.fr/2015/talk/AIM-2044/Caching_reboot:_javax.cache_&amp;amp;_Ehcache_3.html&quot; class=&quot;bare&quot;&gt;https://www.devoxx.fr/2015/talk/AIM-2044/Caching_reboot:_javax.cache_&amp;amp;_Ehcache_3.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=cnj7b98KeRU&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=cnj7b98KeRU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/LouisJacomet/caching-reboot-javaxcache-ehcache-3&quot; class=&quot;bare&quot;&gt;http://www.slideshare.net/LouisJacomet/caching-reboot-javaxcache-ehcache-3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          &lt;p&gt;&lt;a href=&quot;https://www.ehcache.org/resources/2015/04/09/caching-reboot.html&quot;&gt;Caching reboot: javax.cache & Ehcache 3&lt;/a&gt; was originally published by  at &lt;a href=&quot;https://www.ehcache.org&quot;&gt;Ehcache&lt;/a&gt; on April 09, 2015.&lt;/p&gt;</content>
        </entry>
    

</feed>